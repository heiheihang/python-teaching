{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Week3_Homework","provenance":[],"authorship_tag":"ABX9TyMeocD4kHylJyoD7WAmg8LB"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"6E6ChyLCPGAG","colab_type":"text"},"source":["# Revision"]},{"cell_type":"markdown","metadata":{"id":"mHU43mLlPWne","colab_type":"text"},"source":["A list can hold data in it:\n","\n","\n","```\n","a = [2,4,5,6,7]\n","b = ['hi', 'i', 'am', 'a', 'noob']\n","c = [4, 'hi',3, 'bye', 2]\n","```\n","In most cases lists should only hold 1 data type (all integers or strings). \n"]},{"cell_type":"markdown","metadata":{"id":"CrJukAdCRC9K","colab_type":"text"},"source":["We can add new elements to the end of a list with `append`\n","\n","\n","```\n","a = [2,4,5,6,7]\n","a.append(5)\n","print(a) #[2,4,5,6,7,5]\n","```\n","\n"]},{"cell_type":"markdown","metadata":{"id":"1IurKoMxRpD5","colab_type":"text"},"source":["We can access the member of a list via its position.\n","\n","```\n","a = [2,4,5,6,7]\n","a[0] = 2\n","a[1] = 4\n","a[2] = 5\n","a[3] = 6\n","a[4] = 7\n","```\n","\n"]},{"cell_type":"markdown","metadata":{"id":"XUXPZ84oSHss","colab_type":"text"},"source":["We can access the lenght of a list `a` via `len(a)`\n","\n","```\n","a = [2,4,5,6,7]\n","print(len(a)) #5\n","```\n","\n"]},{"cell_type":"markdown","metadata":{"id":"B0lKF8RFSWcS","colab_type":"text"},"source":["We can sort a list `a` with `a.sort()`\n","\n","```\n","a = [5,4,3,9,8]\n","a.sort() #[3,4,5,8,9]\n","```\n","\n"]},{"cell_type":"markdown","metadata":{"id":"wwBJ1bqfTyPe","colab_type":"text"},"source":["Lastly We can remove an element at position `i` in list `a` with `a.pop(i)`\n","\n","```\n","a = [3,3,6,6,7,3]\n","a.pop(3) \n","print(a) #[3,3,6,7,3]\n","```\n","\n"]},{"cell_type":"markdown","metadata":{"id":"xGcVtwPJUFee","colab_type":"text"},"source":["# Homework"]},{"cell_type":"markdown","metadata":{"id":"0RyY9w1iUatu","colab_type":"text"},"source":["# Task1\n","List `a` of even length `2n` is called balance if the sum of its first `n` elements equal to the sum of its last `n` elements.\n","\n","You are allowed to add or subtract an element in a list by at most 2 per move.\n","\n","For example \n","\n","```\n","[1,3,5,5,7,8] -> [1,5,5,5,7,8] \n","```\n","Output the minimum number of moves you need to make a list`a` to be a balanced list.\n"]},{"cell_type":"code","metadata":{"id":"s8GTHC1APB44","colab_type":"code","colab":{}},"source":["#Your Code Here"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pWldPmAcZ8tL","colab_type":"text"},"source":["# Task 2\n","Oops, for a balanced list I mean the **sum of integers at even position is equal to the sum of integers at odd position**! With the same definition of `moves` from Task 1, output the minimum number of moves for a list `a` to be balanced"]},{"cell_type":"code","metadata":{"id":"oIZSRVQKbrON","colab_type":"code","colab":{}},"source":["#Your Code Here"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jQMzBzQYbs0J","colab_type":"text"},"source":["# Task 3\n","Finally lists with strings :)\n","\n","You will be given a list with characters: `(` and `)`. \n","Your task is to \"clean\" the list such that if a `(` is followed by a `)`, both the `(` and the `)` will be popped from the list\n","\n","For example\n","\n","\n","\n","```\n","a = ['(', '(', ')', ')', '(', '(', ')']\n","a = ['(', ')', '(', '(', ')']\n","a = ['(', '(', ')']\n","a = ['(']\n","```\n","Hints:\n","\n","\n","*   use `if(a[i] == ')')` to check if it is closing bracket\n","*   You might want to use a new list and constantly check its last element!\n","*   You can access the last element of a list with a[-1]\n","*   You need to use `pop(-1)` for a good solution\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"3e6nvEN6d-Ir","colab_type":"code","colab":{}},"source":["#Your Code Here"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KAB5QM_veYE7","colab_type":"text"},"source":["# Task 4 (Hard)\n","For a list `a` to be *GOOD*, it has an equal number of elements that:\n","\n","\n","*   x % 3 == 0\n","*   x % 3 == 1\n","*   x % 3 == 2\n","\n","For example, `[0,1,2,3,4,5]` is *GOOD* because it has an equal number of integers satisfying each of the property listed above (2 each).\n","\n","In each move, you can add or subtract any integer in a list by 2. \n","\n","Output the minimum move such that you can turn a list to a *GOOD* list."]},{"cell_type":"code","metadata":{"id":"ajiJr9bqhJAv","colab_type":"code","colab":{}},"source":["#Your Code Here"],"execution_count":null,"outputs":[]}]}